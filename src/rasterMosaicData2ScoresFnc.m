function [ scoreRasterMosaicData ] = rasterMosaicData2ScoresFnc( ...
                                                inputRasterMosaicData, ...
                                                scoreRange,...
                                                gridMask, ...
                                                gridMaskGeoRasterRef )
%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here

%% Parse Inputs

P = inputParser;

addRequired(P,'nargin',@(x) ...
    x == 4);
addRequired(P,'nargout',@(x) ...
    x == 1);
addRequired(P,'inputRasterMosaicData',@(x) ...
    iscell(x) && ...
    all(any(~cellfun(@isempty,x))));
addRequired(P,'scoreRange',@(x) ...
    isnumeric(x) && ...
    isarray(x) && ...
    numel(x) == 2 && ...
    ~isempty(x));
addRequired(P,'gridMask',@(x) ...
    isnumeric(x) && ...
    isarray(x) && ...
    ~isempty(x));
addRequired(P,'gridMaskGeoRasterRef',@(x) ...
    isa(x,'spatialref.GeoRasterReference'));

parse(P,nargin,nargout,inputRasterMosaicData,scoreRange,gridMask,gridMaskGeoRasterRef);

%% Function Parameters

mosaicSize = size(inputRasterMosaicData,1);
rasterCount = mosaicSize(1,1);
scoreRasterMosaicData = cell(mosaicSize);

%% Iteratively Perform Reclassification with User Inputs

for i = 1:rasterCount 
   
    currentRasterData = inputRasterMosaicData{i,1};
    currentRasterName = inputRasterMosaicData{i,2};    
    categoricalDataFlag = input(['Is the raster dataset: ',...
        currentRasterName, ...
        ' of categorical type (0 = No, 1 = Yes)?']);
    
    switch categoricalDataFlag
        
        case 0
            
        breakCount = input(['How many breaks would you like to create ', ...
            'for the raster dataset: ', ...
            currentRasterName,'?']);
        
        currentRasterBreaks = rasterDataHist2BreaksFnc( ...
            currentRasterData, ...
            categoricalDataFlag, ...
            breakCount, ...
            gridMask, ...
            gridMaskGeoRasterRef);
        
        case 1
            
            
    
end

end